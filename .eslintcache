[{"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/index.tsx":"1","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/serviceWorker.ts":"2","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/App.tsx":"3","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/store/configureStore.ts":"4","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/store/initialStore.ts":"5","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Container.tsx":"6","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistPreview/index.tsx":"7","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/SuccessScreen/index.tsx":"8","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistGenerator/index.tsx":"9","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/LoginScreen/index.tsx":"10","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/connectors/SpotifyAPIConnector.ts":"11","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistPreview/PlaylistPreview.tsx":"12","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/CenterBox.tsx":"13","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Button.tsx":"14","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/reducers/index.ts":"15","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/actions/index.ts":"16","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistGenerator/ConfigurationForm.tsx":"17","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Popup.tsx":"18","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/LoadingSpinner.tsx":"19","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/ContentContainer.tsx":"20","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Box.tsx":"21"},{"size":452,"mtime":1609334054560,"results":"22","hashOfConfig":"23"},{"size":5295,"mtime":1609334054561,"results":"24","hashOfConfig":"23"},{"size":2032,"mtime":1609335422169,"results":"25","hashOfConfig":"23"},{"size":731,"mtime":1609334054562,"results":"26","hashOfConfig":"23"},{"size":568,"mtime":1609334054562,"results":"27","hashOfConfig":"23"},{"size":265,"mtime":1609335829796,"results":"28","hashOfConfig":"23"},{"size":1880,"mtime":1609334054557,"results":"29","hashOfConfig":"23"},{"size":899,"mtime":1609334054557,"results":"30","hashOfConfig":"23"},{"size":6505,"mtime":1609334054556,"results":"31","hashOfConfig":"23"},{"size":1978,"mtime":1609335291108,"results":"32","hashOfConfig":"23"},{"size":232,"mtime":1609334054560,"results":"33","hashOfConfig":"23"},{"size":3178,"mtime":1609335676967,"results":"34","hashOfConfig":"23"},{"size":211,"mtime":1609334054558,"results":"35","hashOfConfig":"23"},{"size":673,"mtime":1609334054558,"results":"36","hashOfConfig":"23"},{"size":1378,"mtime":1609334054561,"results":"37","hashOfConfig":"23"},{"size":959,"mtime":1609334054554,"results":"38","hashOfConfig":"23"},{"size":10364,"mtime":1609334054556,"results":"39","hashOfConfig":"23"},{"size":917,"mtime":1609334054559,"results":"40","hashOfConfig":"23"},{"size":845,"mtime":1609334054559,"results":"41","hashOfConfig":"23"},{"size":109,"mtime":1609334054559,"results":"42","hashOfConfig":"23"},{"size":258,"mtime":1609335821039,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1nsb9b9",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/index.tsx",[],["93","94"],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/serviceWorker.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/App.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/store/configureStore.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/store/initialStore.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Container.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistPreview/index.tsx",["95","96"],"\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getSpotifyApi } from '../../connectors/SpotifyAPIConnector';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { ExtendedTrackObject } from '../../interfaces/ExtendedTrackObject';\nimport PlaylistPreview from './PlaylistPreview';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../interfaces/RootState';\nimport { setPlaylistId } from '../../actions';\n\nexport interface PlaylistPlan {\n    name: string;\n    trackUris: string[];\n    trackInfos: ExtendedTrackObject[];\n}\n\nconst PlaylistPreviewScreen: React.FC = () => {\n    const playlistPlan = useSelector<RootState, PlaylistPlan>(state => state.playlistPlan);\n    const accessToken = useSelector<RootState, string>(state => state.accessToken);\n    const dispatch = useDispatch();\n    const [spotifyApi, setSpotifyApi] = useState<SpotifyWebApi.SpotifyWebApiJs>(new SpotifyWebApi());\n\n    useEffect(() => {\n        setSpotifyApi(getSpotifyApi(accessToken));\n    }, []);\n\n    const createPlaylist = async () => {\n        const me = await spotifyApi.getMe();\n        const playlistResponse = await spotifyApi.createPlaylist(me.id, {\n            name: playlistPlan.name,\n        });\n        dispatch(setPlaylistId(playlistResponse.id));\n        let lastIdx = 0;\n        playlistPlan.trackUris.forEach((uri, idx) => {\n            if (idx !== 0 && (idx % 100 === 0 || idx === playlistPlan.trackUris.length - 1)) {\n                spotifyApi.addTracksToPlaylist(playlistResponse.id, playlistPlan.trackUris.slice(lastIdx, idx));\n                lastIdx = idx;\n            }\n        });\n    }\n\n    return (\n        <React.Fragment>\n            <PlaylistPreview playlistData={playlistPlan} onPlaylistCreate={createPlaylist}/>\n        </React.Fragment>\n    )\n}\n\nexport default PlaylistPreviewScreen;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/SuccessScreen/index.tsx",["97"],"import React from 'react';\nimport { CenterBox } from '../basic/CenterBox';\nimport { Button, SmallButton } from '../basic/Button';\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../interfaces/RootState';\n\nconst SuccessScreen: React.FC = () => {\n    const playlistId = useSelector<RootState, string>(state => state.playlistId);\n    const history = useHistory();\n\n    const restartGeneration = () => {\n        history.push('/generate');\n    }\n\n    return (<CenterBox>\n        <h3>Great! Your playlist has been created. Check it out in your Spotify client!</h3>\n        <a href={`https://open.spotify.com/playlist/${playlistId}`} target=\"_blank\"><SmallButton>Check it out here</SmallButton></a>\n        <Button onClick={() => restartGeneration()}>Create another playlist</Button>\n    </CenterBox>)\n}\n\nexport default SuccessScreen;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistGenerator/index.tsx",["98","99","100"],"import React, { useState, useEffect } from 'react';\nimport { getSpotifyApi } from '../../connectors/SpotifyAPIConnector';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport ConfigurationForm from './ConfigurationForm';\nimport { LoadingSpinner } from '../basic/LoadingSpinner';\nimport { Popup } from '../basic/Popup';\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setPlaylistPlan, setAccessToken } from '../../actions/index';\nimport { PlaylistParameters } from '../../interfaces/PlaylistParameters';\nimport { RootState } from '../../interfaces/RootState';\nimport { ExtendedTrackObject } from '../../interfaces/ExtendedTrackObject';\n\nconst PlaylistGenerator: React.FC = () => {\n    const accessToken = useSelector<RootState, string>(state => state.accessToken);\n    const dispatch = useDispatch();\n    const [spotifyApi, setSpotifyApi] = useState<SpotifyWebApi.SpotifyWebApiJs>(new SpotifyWebApi());\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if(!accessToken) {\n            history.push('login');\n        } else {\n            setSpotifyApi(getSpotifyApi(accessToken));\n        }\n    }, []);\n\n    const getFilteredTracks = async (playlistFormData: PlaylistParameters) => {\n        setLoading(true);\n        const limitPerFetch = 50;\n        const numberOfFetches = playlistFormData.numberOfTracks / limitPerFetch;\n        const fetchPromises = [];\n\n        if (spotifyApi) {\n            const enoughTracks = await spotifyApi.getMySavedTracks({\n                limit: limitPerFetch,\n                offset: (numberOfFetches - 1) * limitPerFetch\n            }).then(res => true).catch(e => {});\n\n            if (enoughTracks) {\n                setError('');\n                for (let i = 0; i < numberOfFetches; i++) {\n                    fetchPromises.push(spotifyApi.getMySavedTracks({\n                        limit: limitPerFetch,\n                        offset: i * limitPerFetch\n                    }).catch(e => { }));\n                };\n                const userTracks = Array<SpotifyApi.SavedTrackObject>();\n                await Promise.all(fetchPromises).then(res => {\n                    res.map(r => r ? userTracks.push(...r.items) : null);\n                });\n                let tempTrackIds = Array<string>();\n                let audioFeaturesPromises = Array<Promise<SpotifyApi.MultipleAudioFeaturesResponse>>();\n                userTracks.forEach(\n                    (t, idx) => {\n                        if (idx !== 0 && (idx % 100 === 0 || idx === userTracks.length - 1)) {\n                            audioFeaturesPromises.push(getAudioFeaturesForTrackIds(tempTrackIds));\n                            tempTrackIds = [];\n                        } else {\n                            tempTrackIds.push(t.track.id);\n                        }\n                    }\n                );\n                const extendedTracks = Array<ExtendedTrackObject>();\n                await Promise.all(audioFeaturesPromises).then(res => {\n                    const audioFeatures = Array<SpotifyApi.AudioFeaturesResponse>();\n                    res.map(audioFeaturesPromiseResult => audioFeatures.push(...audioFeaturesPromiseResult.audio_features));\n                    audioFeatures.map(audioFeatureTrack => {\n                        const correspondingTrack = userTracks.find(t => t.track.id === audioFeatureTrack.id);\n                        if (correspondingTrack) {\n                            extendedTracks.push({\n                                audioFeatures: audioFeatureTrack,\n                                track: correspondingTrack.track\n                            });\n                        }\n                    })\n                });\n\n                const filteredTracks = filterTracks(extendedTracks,\n                    playlistFormData\n                );\n\n                if (filteredTracks.length > 0) {\n                    setError('');\n                    dispatch(setPlaylistPlan({\n                        name: playlistFormData.playlistName,\n                        trackInfos: filteredTracks,\n                        trackUris: filteredTracks.map(t => t.track.uri)\n                    }));\n                    history.push('/preview');\n\n                } else {\n                    setLoading(false);\n                    setError('Sorry, there are no tracks that fit these conditions. Please try again.');\n                }\n            } else {\n                setLoading(false);\n                setError(`You don't seem to have ${playlistFormData.numberOfTracks} tracks in your library. Please lower the number of tracks to consider.`)\n            }\n        }\n    }\n\n    const getAudioFeaturesForTrackIds = (trackIds: string[]): Promise<SpotifyApi.MultipleAudioFeaturesResponse> => {\n        return spotifyApi.getAudioFeaturesForTracks(trackIds);\n    }\n\n    const filterTracks = (\n        tracks: ExtendedTrackObject[],\n        filters: PlaylistParameters\n    ) => tracks.filter(t => {\n        const releaseDate = (t.track.album as SpotifyApi.AlbumObjectFull)['release_date'];\n        const releaseYear = Number(releaseDate.substr(0, 4));\n        const bpm = t.audioFeatures.tempo > 200 ? t.audioFeatures.tempo / 2 : t.audioFeatures.tempo;\n        const danceability = t.audioFeatures.danceability;\n        const energy = t.audioFeatures.energy;\n        const valence = t.audioFeatures.valence;\n\n        return releaseYear >= (filters.startYear || 0) &&\n            releaseYear <= (filters.endYear || 10000) &&\n            bpm >= (filters.startBpm || 0) &&\n            bpm <= (filters.endBpm || 10000) &&\n            danceability >= (filters.danceability ? filters.danceability[0] : 0.0) &&\n            danceability <= (filters.danceability ? filters.danceability[1] : 1.0) &&\n            energy >= (filters.energy ? filters.energy[0] : 0.0) &&\n            energy <= (filters.energy ? filters.energy[0] : 1.0) &&\n            valence >= (filters.valence ? filters.valence[0] : 0.0) &&\n            valence <= (filters.valence ? filters.valence[1] : 1.0)\n    });\n\n    return (\n        <React.Fragment>\n            {\n                loading ? (<LoadingSpinner></LoadingSpinner>) : (<ConfigurationForm onSubmitForm={getFilteredTracks} />)\n            }\n            {error ? <Popup onClose={() => setError('')}>{error}</Popup> : ''}\n        </React.Fragment>\n    )\n}\n\nexport default PlaylistGenerator;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/LoginScreen/index.tsx",["101"],"import React, { useEffect } from 'react';\nimport { Button } from '../basic/Button';\nimport { Box } from '../basic/Box';\nimport { ContentContainer } from '../basic/ContentContainer';\nimport { useDispatch } from 'react-redux';\nimport { setAccessToken } from '../../actions';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginScreen: React.FC = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        const searchParams = new URLSearchParams(new URL(window.location.href).search.slice(1));\n        const code = searchParams.get('code');\n        \n        if(code !== null) {\n            fetch(`https://ekztlsf157.execute-api.eu-west-1.amazonaws.com/prod/get-tokens?code=${code}`)\n                .then(res => res.json())\n                .then(json => json.done.json['access_token'])\n                .then(token => {\n                    dispatch(setAccessToken(token));\n                    history.push('/generate');\n                })\n                .catch(e => console.error(e));\n        }\n    }, [])\n    \n    const authenticateSpotifyAPI = async () => {\n        fetch('https://ekztlsf157.execute-api.eu-west-1.amazonaws.com/prod/authenticate')\n            .then(res => res.json())\n            .then(json => JSON.parse(json.body).done['redirect_uri'])\n            .then(uri => {\n                console.log(uri);\n                \n                window.location.href = uri;\n            })\n            .catch(e => console.error(e));\n    }\n\n    return (\n        <Box>\n            <h1>Hi there!</h1>\n            <h2>Welcome to listify!</h2>\n            <ContentContainer>\n                <p>listify allows you to create Spotify playlists based on different parameters.</p>\n                <p>It browses your \"Liked Songs\" for the ones that fit your filters.</p>\n            </ContentContainer>\n            <Button onClick={() => authenticateSpotifyAPI()}>Start</Button>\n        </Box>\n    )\n}\n\nexport default LoginScreen;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/connectors/SpotifyAPIConnector.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistPreview/PlaylistPreview.tsx",["102"],"import { PlaylistPlan } from '../../interfaces/PlaylistPlan';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '../basic/Button';\nimport { useHistory } from \"react-router-dom\";\nimport { Box } from '../basic/Box';\n\nconst List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 100%;\n    padding: 0;\n`;\n\nconst ListItem = styled.li`\n    background-color: white;\n    list-style-type: none;\n    padding: 5px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n`;\n\nconst Artist = styled.p`\n    font-size: 16px;\n    margin: 0;\n    color: black;\n`;\n\nconst Title = styled.p`\n    font-size: 16px;\n    font-weight: bold;\n    margin: 5px 0 0 0;\n    color: black;\n`;\n\ninterface ChildComponentProps {\n    playlistData: PlaylistPlan;\n    onPlaylistCreate: Function;\n}\n\nconst NUMBER_OF_PREVIEW_TRACKS = 8;\n\nconst PlaylistPreview: React.FC<ChildComponentProps> = ({ playlistData, onPlaylistCreate }) => {\n    const [notification, setNotification] = useState('');\n    const history = useHistory();\n\n    useEffect(() => {\n        setNotification('')\n    }, [playlistData]);\n\n    const onCreateClick = () => {\n        onPlaylistCreate();\n        history.push('/success');\n    }\n\n    const onRedoClick = () => {\n        history.goBack();\n    }\n\n    const shuffleArray = (array: any[]) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    return (\n        <Box>\n            {\n                notification ? (<div>{notification}</div>) : (\n                    <React.Fragment>\n                        <h1>{playlistData.name}</h1>\n                        <h2>{playlistData.trackUris.length} tracks</h2>\n                        <List>\n                            {shuffleArray(playlistData.trackInfos).map((t, idx) => {\n                                if (idx <= NUMBER_OF_PREVIEW_TRACKS) {\n                                    return (\n                                        <ListItem key={t.track.id}>\n                                            <Artist>\n                                                {t.track.artists[0].name}\n                                            </Artist>\n                                            <Title>\n                                                {t.track.name}\n                                            </Title>\n                                        </ListItem>\n                                    );\n                                }\n                                if (idx === NUMBER_OF_PREVIEW_TRACKS + 1) {\n                                    return (<ListItem key=\"more\">...</ListItem>);\n                                }\n                            })}\n                        </List>\n                        <Button onClick={onCreateClick}>Save Playlist</Button>\n                        <Button onClick={onRedoClick}>Readjust Parameters</Button>\n                    </React.Fragment>\n               )\n            }\n        </Box>\n    )\n}\n\nexport default PlaylistPreview;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/CenterBox.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Button.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/reducers/index.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/actions/index.ts",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/PlaylistGenerator/ConfigurationForm.tsx",["103","104","105","106","107"],"import React, { useState, useEffect, useCallback, EventHandler, SyntheticEvent, ChangeEvent } from 'react';\nimport styled from 'styled-components';\nimport { Button, SmallButton } from '../basic/Button';\nimport { ContentContainer } from '../basic/ContentContainer';\nimport { Box } from '../basic/Box';\nimport { PlaylistParameters } from '../../interfaces/PlaylistParameters';\nimport { PlaylistConfigurationParameters } from '../../interfaces/PlaylistConfigurationParameters';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../interfaces/RootState';\nimport { setPlaylistConfigurationParameters } from '../../actions';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './styles.css';\n\nconst Label = styled.label`\n    font-size: 16px;\n    color: white;\n`;\n\nconst FormSet = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    grid-gap: 10px;\n    width: 100%;\n    max-width: 100%;\n    transition: opacity 0.3s;\n    margin: 10px 0;\n`;\n\nconst InputSet = styled.div`\n    display: flex;\n    flex-direction: column;\n    overflow: visible;\n    cursor: pointer;\n    margin: 20px 0;\n`\n\nconst Input = styled.input`\n    font-size: 18px;\n    border-radius: 5px;\n    border: none;\n    padding: 15px;\n    margin: 5px 0 15px 0px;\n`;\n\ninterface ChildComponentProps {\n    onSubmitForm: ({ }: PlaylistParameters) => void;\n}\n\nconst ConfigurationForm: React.FC<ChildComponentProps> = ({\n    onSubmitForm }) => {\n    const playlistConfigurationParameters = useSelector<RootState, PlaylistConfigurationParameters>(state => state.playlistConfigurationParameters);\n    const dispatch = useDispatch();\n\n    const [numberOfTracks, setNumberOfTracks] = useState(playlistConfigurationParameters.numberOfTracks);\n    const [playlistName, setPlaylistName] = useState(playlistConfigurationParameters.playlistName);\n    const [yearToggle, setYearToggle] = useState(playlistConfigurationParameters.yearToggle);\n    const [startYear, setStartYear] = useState(playlistConfigurationParameters.startYear);\n    const [endYear, setEndYear] = useState(playlistConfigurationParameters.endYear);\n    const [bpmToggle, setBpmToggle] = useState(playlistConfigurationParameters.bpmToggle);\n    const [startBpm, setStartBpm] = useState(playlistConfigurationParameters.startBpm);\n    const [endBpm, setEndBpm] = useState(playlistConfigurationParameters.endBpm);\n    const [danceabilityToggle, setDanceabilityToggle] = useState(playlistConfigurationParameters.danceabilityToggle);\n    const [danceability, setDanceability] = useState(playlistConfigurationParameters.danceability);\n    const [energyToggle, setEnergyToggle] = useState(playlistConfigurationParameters.energyToggle);\n    const [energy, setEnergy] = useState(playlistConfigurationParameters.energy);\n    const [valenceToggle, setValenceToggle] = useState(playlistConfigurationParameters.valenceToggle);\n    const [valence, setValence] = useState(playlistConfigurationParameters.valence);\n\n    const onInputClick = useCallback(({ target }) => {\n        target.select();\n    }, []);\n\n    const onPlaylistNameInput = useCallback(({ target }) => {\n        setPlaylistName(target.value);\n    }, []);\n\n    const onStartBpmInput = useCallback(({ target }) => {\n        setStartBpm(target.value);\n        if (endBpm < target.value) {\n            setEndBpm(target.value);\n        }\n    }, [endBpm]);\n\n    const onEndBpmInput = useCallback(({ target }) => {\n        setEndBpm(target.value);\n        if (startBpm > target.value) {\n            //setStartBpm(target.value);\n        }\n    }, [startBpm]);\n\n    const onStartYearInput = useCallback(({ target }) => {\n        setStartYear(target.value);\n\n        if (target.value.length === 4 && endYear < target.value) {\n            setEndYear(target.value);\n        }\n    }, [endYear]);\n\n    const onEndYearInput = useCallback(({ target }) => {\n        setEndYear(target.value);\n\n        if (target.value.length === 4 && startYear > target.value) {\n            setStartYear(target.value);\n        }\n    }, [startYear]);\n\n    const onNumberInput = useCallback(({ target }) => {\n        setNumberOfTracks(target.value);\n    }, []);\n\n    const onDanceabilityInput = useCallback((event: ChangeEvent<{}>, newValue: number | number[]) => {\n        setDanceability((newValue as number[]));\n    }, []);\n\n    const onEnergyInput = useCallback((event: ChangeEvent<{}>, newValue: number | number[]) => {\n        setEnergy((newValue as number[]));\n    }, []);\n\n    const onValenceInput = useCallback((event: ChangeEvent<{}>, newValue: number | number[]) => {\n        setValence((newValue as number[]));\n    }, []);\n\n    const onBpmToggle = useCallback((bool) => {\n        setBpmToggle(bool);\n    }, []);\n\n    const onYearToggle = useCallback((bool) => {\n        setYearToggle(bool);\n    }, []);\n\n    const onDanceabilityToggle = useCallback((bool) => {\n        setDanceabilityToggle(bool);\n    }, []);\n\n    const onEnergyToggle = useCallback((bool) => {\n        setEnergyToggle(bool);\n    }, []);\n\n    const onValenceToggle = useCallback((bool) => {\n        setValenceToggle(bool);\n    }, []);\n\n    const onButtonClick = () => {\n        dispatch(setPlaylistConfigurationParameters({\n            playlistName,\n            startYear,\n            endYear,\n            startBpm,\n            endBpm,\n            danceability,\n            energy,\n            valence,\n            yearToggle,\n            bpmToggle,\n            danceabilityToggle,\n            energyToggle,\n            valenceToggle,\n            numberOfTracks\n        }))\n        onSubmitForm({\n            playlistName,\n            startBpm: bpmToggle ? startBpm : undefined,\n            endBpm: bpmToggle ? endBpm : undefined,\n            startYear: yearToggle ? Number(startYear) : undefined,\n            endYear: yearToggle ? Number(endYear) : undefined,\n            numberOfTracks,\n            danceability: danceabilityToggle ? danceability.map(d => d / 100.0) : undefined,\n            energy: energyToggle ? energy.map(e => e / 100.0) : undefined,\n            valence: valenceToggle ? valence.map(v => v / 100.0) : undefined,\n        })\n    }\n\n    return (\n        <Box>\n            <h1>Configuration</h1>\n            <ContentContainer>\n                <InputSet>\n                    <Label htmlFor=\"playlistName\">Name of playlist</Label>\n                    <Input name=\"playlistName\" type=\"text\" value={playlistName} onClick={onInputClick} onChange={onPlaylistNameInput}></Input>\n                    <Label htmlFor=\"numberOfTemplateTracks\">Number of tracks to consider</Label>\n                    <Input name=\"numberOfTemplateTracks\" type=\"number\" value={numberOfTracks} onClick={onInputClick} onChange={onNumberInput}></Input>\n                </InputSet>\n                <FormSet className={bpmToggle ? '' : 'disabled'} onClick={!bpmToggle ? () => onBpmToggle(true) : () => { }}>\n                    <InputSet>\n                        <Label htmlFor=\"startBpm\">BPM Range Start</Label>\n                        <Input disabled={!bpmToggle} name=\"startBpm\" type=\"number\" value={startBpm} onClick={onInputClick} onChange={onStartBpmInput}></Input>\n                    </InputSet>\n                    <InputSet>\n                        <Label htmlFor=\"endBpm\">BPM Range End</Label>\n                        <Input disabled={!bpmToggle} name=\"endBpm\" type=\"number\" value={endBpm} onClick={onInputClick} onChange={onEndBpmInput}></Input>\n                    </InputSet>\n                    {bpmToggle ? (<SmallButton className=\"disableParameterButton\" onClick={() => onBpmToggle(false)}>Disable Parameter</SmallButton>) : ''}\n                </FormSet>\n                <FormSet className={yearToggle ? '' : 'disabled'} onClick={!yearToggle ? () => onYearToggle(true) : () => { }}>\n                    <InputSet>\n                        <Label htmlFor=\"startYear\">Release period (start year)</Label>\n                        <Input disabled={!yearToggle} name=\"startYear\" type=\"number\" value={startYear} onClick={onInputClick} onChange={onStartYearInput}></Input>\n                    </InputSet>\n                    <InputSet>\n                        <Label htmlFor=\"endYear\">Release period (end year)</Label>\n                        <Input disabled={!yearToggle} name=\"endYear\" type=\"number\" value={endYear} onClick={onInputClick} onChange={onEndYearInput}></Input>\n                    </InputSet>\n                    {yearToggle ? (<SmallButton className=\"disableParameterButton\" onClick={() => onYearToggle(false)}>Disable Parameter</SmallButton>) : ''}\n                </FormSet>\n                <InputSet className={danceabilityToggle ? '' : 'disabled'} onClick={!danceabilityToggle ? () => onDanceabilityToggle(true) : () => { }}>\n                    <Label htmlFor=\"danceability\">Danceability</Label>\n                    <Slider disabled={!danceabilityToggle} name=\"danceability\" value={danceability} onChange={onDanceabilityInput}></Slider>\n                    {danceabilityToggle ? (<SmallButton className=\"disableParameterButton\" onClick={() => onDanceabilityToggle(false)}>Disable Parameter</SmallButton>) : ''}\n                </InputSet>\n                <InputSet className={energyToggle ? '' : 'disabled'} onClick={!energyToggle ? () => onEnergyToggle(true) : () => { }}>\n                    <Label htmlFor=\"energy\">Energy</Label>\n                    <Slider disabled={!energyToggle} name=\"energy\" value={energy} onChange={onEnergyInput}></Slider>\n                    {energyToggle ? (<SmallButton className=\"disableParameterButton\" onClick={() => onEnergyToggle(false)}>Disable Parameter</SmallButton>) : ''}\n                </InputSet>\n                <InputSet className={valenceToggle ? '' : 'disabled'} onClick={!valenceToggle ? () => onValenceToggle(true) : () => { }}>\n                    <Label htmlFor=\"valence\">Valence</Label>\n                    <Slider disabled={!valenceToggle} name=\"valence\" value={valence} onChange={onValenceInput}></Slider>\n                    {valenceToggle ? (<SmallButton className=\"disableParameterButton\" onClick={() => onValenceToggle(false)}>Disable Parameter</SmallButton>) : ''}\n                </InputSet>\n                <Button onClick={onButtonClick}>Get Playlist</Button>\n            </ContentContainer>\n        </Box>\n    )\n}\n\nexport default ConfigurationForm;","/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Popup.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/LoadingSpinner.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/ContentContainer.tsx",[],"/Users/kai.wissler/Code/private/spotify-playlist-generator/src/components/basic/Box.tsx",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":14},{"ruleId":"116","severity":1,"message":"117","line":26,"column":8,"nodeType":"118","endLine":26,"endColumn":10,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":18,"column":9,"nodeType":"122","endLine":18,"endColumn":85},{"ruleId":"112","severity":1,"message":"123","line":9,"column":27,"nodeType":"114","messageId":"115","endLine":9,"endColumn":41},{"ruleId":"116","severity":1,"message":"124","line":28,"column":8,"nodeType":"118","endLine":28,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":70,"column":57,"nodeType":"128","messageId":"129","endLine":70,"endColumn":59},{"ruleId":"116","severity":1,"message":"130","line":27,"column":8,"nodeType":"118","endLine":27,"endColumn":10,"suggestions":"131"},{"ruleId":"126","severity":1,"message":"132","line":77,"column":81,"nodeType":"128","messageId":"133","endLine":77,"endColumn":83},{"ruleId":"112","severity":1,"message":"134","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"135","line":1,"column":51,"nodeType":"114","messageId":"115","endLine":1,"endColumn":63},{"ruleId":"112","severity":1,"message":"136","line":1,"column":65,"nodeType":"114","messageId":"115","endLine":1,"endColumn":79},{"ruleId":"112","severity":1,"message":"137","line":12,"column":10,"nodeType":"114","messageId":"115","endLine":12,"endColumn":20},{"ruleId":"138","severity":1,"message":"139","line":47,"column":20,"nodeType":"140","messageId":"141","endLine":47,"endColumn":43},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'accessToken'. Either include it or remove the dependency array.","ArrayExpression",["144"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'setAccessToken' is defined but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'history'. Either include them or remove the dependency array.",["145"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["146"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useEffect' is defined but never used.","'EventHandler' is defined but never used.","'SyntheticEvent' is defined but never used.","'makeStyles' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [accessToken]",{"range":"153","text":"154"},"Update the dependencies array to be: [accessToken, history]",{"range":"155","text":"156"},"Update the dependencies array to be: [dispatch, history]",{"range":"157","text":"158"},[1056,1058],"[accessToken]",[1271,1273],"[accessToken, history]",[1057,1059],"[dispatch, history]"]